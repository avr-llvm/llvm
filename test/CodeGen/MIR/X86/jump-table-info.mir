# RUN: llc -march=x86-64 -start-after branch-folder -stop-after branch-folder -o /dev/null %s | FileCheck %s
# This test ensures that the MIR parser parses the jump table info and jump
# table operands correctly.

--- |

  define i32 @test_jumptable(i32 %in) {
  entry:
    switch i32 %in, label %def [
      i32 0, label %lbl1
      i32 1, label %lbl2
      i32 2, label %lbl3
      i32 3, label %lbl4
    ]

  def:
    ret i32 0

  lbl1:
    ret i32 1

  lbl2:
    ret i32 2

  lbl3:
    ret i32 4

  lbl4:
    ret i32 8
  }

  define i32 @test_jumptable2(i32 %in) {
  entry:
    switch i32 %in, label %def [
      i32 0, label %lbl1
      i32 1, label %lbl2
      i32 2, label %lbl3
      i32 3, label %lbl4
    ]

  def:
    ret i32 0

  lbl1:
    ret i32 1

  lbl2:
    ret i32 2

  lbl3:
    ret i32 4

  lbl4:
    ret i32 8
  }

...
---
name:            test_jumptable
# CHECK:      jumpTable:
# CHECK-NEXT: kind: label-difference32
# CHECK-NEXT: entries:
# CHECK-NEXT: - id: 0
# CHECK-NEXT: blocks: [ '%bb.3.lbl1', '%bb.4.lbl2', '%bb.5.lbl3', '%bb.6.lbl4' ]
# CHECK_NEXT: body:
jumpTable:
  kind:          label-difference32
  entries:
    - id:        0
      blocks:    [ '%bb.3.lbl1', '%bb.4.lbl2', '%bb.5.lbl3', '%bb.6.lbl4' ]
body:
  - id:          0
    name:        entry
    successors:  [ '%bb.2.def', '%bb.1.entry' ]
    instructions:
      - '%eax = MOV32rr %edi, implicit-def %rax'
      - 'CMP32ri8 %edi, 3, implicit-def %eflags'
      - 'JA_1 %bb.2.def, implicit %eflags'
  - id:          1
    name:        entry
    successors:  [ '%bb.3.lbl1', '%bb.4.lbl2', '%bb.5.lbl3', '%bb.6.lbl4' ]
    instructions:
    # CHECK: %rcx = LEA64r %rip, 1, _, %jump-table.0, _
      - '%rcx = LEA64r %rip, 1, _, %jump-table.0, _'
      - '%rax = MOVSX64rm32 %rcx, 4, %rax, 0, _'
      - '%rax = ADD64rr %rax, %rcx, implicit-def %eflags'
      - 'JMP64r %rax'
  - id:          2
    name:        def
    instructions:
      - '%eax = MOV32r0 implicit-def %eflags'
      - 'RETQ %eax'
  - id:          3
    name:        lbl1
    instructions:
      - '%eax = MOV32ri 1'
      - 'RETQ %eax'
  - id:          4
    name:        lbl2
    instructions:
      - '%eax = MOV32ri 2'
      - 'RETQ %eax'
  - id:          5
    name:        lbl3
    instructions:
      - '%eax = MOV32ri 4'
      - 'RETQ %eax'
  - id:          6
    name:        lbl4
    instructions:
      - '%eax = MOV32ri 8'
      - 'RETQ %eax'
...
---
name:            test_jumptable2
jumpTable:
  kind:          label-difference32
  entries:
    - id:        1
      blocks:    [ '%bb.3.lbl1', '%bb.4.lbl2', '%bb.5.lbl3', '%bb.6.lbl4' ]
body:
  - id:          0
    name:        entry
    successors:  [ '%bb.2.def', '%bb.1.entry' ]
    instructions:
      - '%eax = MOV32rr %edi, implicit-def %rax'
      - 'CMP32ri8 %edi, 3, implicit-def %eflags'
      - 'JA_1 %bb.2.def, implicit %eflags'
  - id:          1
    name:        entry
    successors:  [ '%bb.3.lbl1', '%bb.4.lbl2', '%bb.5.lbl3', '%bb.6.lbl4' ]
    instructions:
    # Verify that the printer will use an id of 0 for this jump table:
    # CHECK: %rcx = LEA64r %rip, 1, _, %jump-table.0, _
      - '%rcx = LEA64r %rip, 1, _, %jump-table.1, _'
      - '%rax = MOVSX64rm32 %rcx, 4, %rax, 0, _'
      - '%rax = ADD64rr %rax, %rcx, implicit-def %eflags'
      - 'JMP64r %rax'
  - id:         2
    name:       def
    instructions:
      - '%eax = MOV32r0 implicit-def %eflags'
      - 'RETQ %eax'
  - id:         3
    name:       lbl1
    instructions:
      - '%eax = MOV32ri 1'
      - 'RETQ %eax'
  - id:         4
    name:       lbl2
    instructions:
      - '%eax = MOV32ri 2'
      - 'RETQ %eax'
  - id:         5
    name:       lbl3
    instructions:
      - '%eax = MOV32ri 4'
      - 'RETQ %eax'
  - id:         6
    name:       lbl4
    instructions:
      - '%eax = MOV32ri 8'
      - 'RETQ %eax'
...
