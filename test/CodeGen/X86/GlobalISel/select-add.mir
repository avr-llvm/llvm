# RUN: llc -mtriple=x86_64-linux-gnu                                  -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=ALL --check-prefix=NO_AVX512VL --check-prefix=NO_AVX512F --check-prefix=SSE
# RUN: llc -mtriple=x86_64-linux-gnu -mattr=+avx                      -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=ALL --check-prefix=NO_AVX512VL --check-prefix=NO_AVX512F --check-prefix=AVX
# RUN: llc -mtriple=x86_64-linux-gnu -mattr=+avx512f                  -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=ALL --check-prefix=NO_AVX512VL --check-prefix=AVX512ALL --check-prefix=AVX512F
# RUN: llc -mtriple=x86_64-linux-gnu -mattr=+avx512f -mattr=+avx512vl -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=ALL --check-prefix=AVX512ALL --check-prefix=AVX512VL

--- |
  define i64 @test_add_i64(i64 %arg1, i64 %arg2) {
    %ret = add i64 %arg1, %arg2
    ret i64 %ret
  }

  define i32 @test_add_i32(i32 %arg1, i32 %arg2) {
    %ret = add i32 %arg1, %arg2
    ret i32 %ret
  }

  define float @test_add_float(float %arg1, float %arg2) {
    %ret = fadd float %arg1, %arg2
    ret float %ret
  }

  define double @test_add_double(double %arg1, double %arg2) {
    %ret = fadd double %arg1, %arg2
    ret double %ret
  }

  define <4 x i32> @test_add_v4i32(<4 x i32> %arg1, <4 x i32> %arg2) {
    %ret = add <4 x i32> %arg1, %arg2
    ret <4 x i32> %ret
  }

  define <4 x float>  @test_add_v4f32(<4 x float> %arg1, <4 x float>  %arg2) {
    %ret = fadd <4 x float>  %arg1, %arg2
    ret <4 x float>  %ret
  }
...

---
name:            test_add_i64
legalized:       true
regBankSelected: true
# ALL:      registers:
# ALL-NEXT:  - { id: 0, class: gr64 }
# ALL-NEXT:  - { id: 1, class: gr64 }
# ALL-NEXT:  - { id: 2, class: gr64 }
registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }
  - { id: 2, class: gpr }
# ALL:      %0 = COPY %rdi
# ALL-NEXT: %1 = COPY %rsi
# ALL-NEXT: %2 = ADD64rr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %edi, %esi

    %0(s64) = COPY %rdi
    %1(s64) = COPY %rsi
    %2(s64) = G_ADD %0, %1
    %rax = COPY %2(s64)

...

---
name:            test_add_i32
legalized:       true
regBankSelected: true
# ALL:      registers:
# ALL-NEXT:  - { id: 0, class: gr32 }
# ALL-NEXT:  - { id: 1, class: gr32 }
# ALL-NEXT:  - { id: 2, class: gr32 }
registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }
  - { id: 2, class: gpr }
# ALL:      %0 = COPY %edi
# ALL-NEXT: %1 = COPY %esi
# ALL-NEXT: %2 = ADD32rr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %edi, %esi

    %0(s32) = COPY %edi
    %1(s32) = COPY %esi
    %2(s32) = G_ADD %0, %1
    %rax = COPY %2(s32)

...
---
name:            test_add_float
alignment:       4
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
# ALL: registers:
# NO_AVX512F-NEXT:  - { id: 0, class: fr32 }
# NO_AVX512F-NEXT:  - { id: 1, class: fr32 }
# NO_AVX512F-NEXT:  - { id: 2, class: fr32 }
# AVX512ALL-NEXT:  - { id: 0, class: fr32x }
# AVX512ALL-NEXT:  - { id: 1, class: fr32x }
# AVX512ALL-NEXT:  - { id: 2, class: fr32x }
registers:
  - { id: 0, class: vecr }
  - { id: 1, class: vecr }
  - { id: 2, class: vecr }
# ALL:          %0 = COPY %xmm0
# ALL-NEXT:     %1 = COPY %xmm1
# SSE-NEXT:     %2 = ADDSSrr %0, %1
# AVX-NEXT:     %2 = VADDSSrr %0, %1
# AVX512F-NEXT: %2 = VADDSSZrr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %xmm0, %xmm1

    %0(s32) = COPY %xmm0
    %1(s32) = COPY %xmm1
    %2(s32) = G_FADD %0, %1
    %xmm0 = COPY %2(s32)
    RET 0, implicit %xmm0

...
---
name:            test_add_double
alignment:       4
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
# ALL: registers:
# NO_AVX512F-NEXT:  - { id: 0, class: fr64 }
# NO_AVX512F-NEXT:  - { id: 1, class: fr64 }
# NO_AVX512F-NEXT:  - { id: 2, class: fr64 }
# AVX512ALL-NEXT:  - { id: 0, class: fr64x }
# AVX512ALL-NEXT:  - { id: 1, class: fr64x }
# AVX512ALL-NEXT:  - { id: 2, class: fr64x }
registers:
  - { id: 0, class: vecr }
  - { id: 1, class: vecr }
  - { id: 2, class: vecr }
# ALL:          %0 = COPY %xmm0
# ALL-NEXT:     %1 = COPY %xmm1
# SSE-NEXT:     %2 = ADDSDrr %0, %1
# AVX-NEXT:     %2 = VADDSDrr %0, %1
# AVX512F-NEXT: %2 = VADDSDZrr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %xmm0, %xmm1

    %0(s64) = COPY %xmm0
    %1(s64) = COPY %xmm1
    %2(s64) = G_FADD %0, %1
    %xmm0 = COPY %2(s64)
    RET 0, implicit %xmm0

...
---
name:            test_add_v4i32
alignment:       4
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
# ALL: registers:
# NO_AVX512VL-NEXT:  - { id: 0, class: vr128 }
# NO_AVX512VL-NEXT:  - { id: 1, class: vr128 }
# NO_AVX512VL-NEXT:  - { id: 2, class: vr128 }
# AVX512VL-NEXT:  - { id: 0, class: vr128x }
# AVX512VL-NEXT:  - { id: 1, class: vr128x }
# AVX512VL-NEXT:  - { id: 2, class: vr128x }
registers:
  - { id: 0, class: vecr }
  - { id: 1, class: vecr }
  - { id: 2, class: vecr }
# ALL:           %0 = COPY %xmm0
# ALL-NEXT:      %1 = COPY %xmm1
# SSE-NEXT:      %2 = PADDDrr %0, %1
# AVX-NEXT:      %2 = VPADDDrr %0, %1
# AVX512F-NEXT:  %2 = VPADDDrr %0, %1
# AVX512VL-NEXT: %2 = VPADDDZ128rr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %xmm0, %xmm1

    %0(<4 x s32>) = COPY %xmm0
    %1(<4 x s32>) = COPY %xmm1
    %2(<4 x s32>) = G_ADD %0, %1
    %xmm0 = COPY %2(<4 x s32>)
    RET 0, implicit %xmm0

...
---
name:            test_add_v4f32
alignment:       4
legalized:       true
regBankSelected: true
selected:        false
tracksRegLiveness: true
# ALL: registers:
# NO_AVX512VL-NEXT:  - { id: 0, class: vr128 }
# NO_AVX512VL-NEXT:  - { id: 1, class: vr128 }
# NO_AVX512VL-NEXT:  - { id: 2, class: vr128 }
# AVX512VL-NEXT:  - { id: 0, class: vr128x }
# AVX512VL-NEXT:  - { id: 1, class: vr128x }
# AVX512VL-NEXT:  - { id: 2, class: vr128x }
registers:
  - { id: 0, class: vecr }
  - { id: 1, class: vecr }
  - { id: 2, class: vecr }
# ALL:           %0 = COPY %xmm0
# ALL-NEXT:      %1 = COPY %xmm1
# SSE-NEXT:      %2 = ADDPSrr %0, %1
# AVX-NEXT:      %2 = VADDPSrr %0, %1
# AVX512F-NEXT:  %2 = VADDPSrr %0, %1
# AVX512VL-NEXT: %2 = VADDPSZ128rr %0, %1
body:             |
  bb.1 (%ir-block.0):
    liveins: %xmm0, %xmm1

    %0(<4 x s32>) = COPY %xmm0
    %1(<4 x s32>) = COPY %xmm1
    %2(<4 x s32>) = G_FADD %0, %1
    %xmm0 = COPY %2(<4 x s32>)
    RET 0, implicit %xmm0

...
