# REQUIRES: object-emission
# RUN: rm -rf %t
# RUN: mkdir -p %t
# RUN: llc -filetype=obj %p/../Inputs/odr1.ll -o %t/odr1.o
# RUN: llc -filetype=obj %p/../Inputs/odr2.ll -o %t/odr2.o
# RUN: llc -filetype=obj %p/../Inputs/odr3.ll -o %t/odr3.o
# RUN: llc -filetype=obj %p/../Inputs/odr4.ll -o %t/odr4.o
# RUN: llc -filetype=obj %p/../Inputs/odr5.ll -o %t/odr5.o
# RUN: llc -filetype=obj %p/../Inputs/odr6.ll -o %t/odr6.o
# RUN: llc -filetype=obj %p/../Inputs/odr7.ll -o %t/odr7.o
# RUN: llvm-dsymutil -oso-prepend-path=%t -y %s -o - | llvm-dwarfdump -debug-dump=info - | FileCheck -check-prefix=ODR -check-prefix=CHECK %s
# RUN: llvm-dsymutil -oso-prepend-path=%t -y %s -no-odr -o - | llvm-dwarfdump -debug-dump=info - | FileCheck -check-prefix=NOODR -check-prefix=CHECK %s

# Totally made up debug map to test ODR uniquing

---
triple:          'x86_64-apple-darwin'
objects:
  - filename: odr1.o
    symbols:
      - { sym: __Z3foov, objAddr: 0x0, binAddr: 0x1000, size: 0x12 }
      - { sym: __Z4funcv, objAddr: 0x0, binAddr: 0x2000, size: 0x12 }
      - { sym: __ZZ4funcvENKUlvE_clEv,  objAddr: 0x0, binAddr: 0x3000, size: 0x12 }

# Check that all our types are in the first CU.

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr1.cpp"

# This is "struct S"

# CHECK: 0x[[S:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK-NEXT: DW_AT_name{{.*}}"S"
# CHECK-NOT: NULL
# CHECK: 0x[[NESTED:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: DW_AT_name{{.*}}"Nested"
# CHECK: NULL
# CHECK: DW_TAG_subprogram
# CHECK: DW_AT_MIPS_linkage_name{{.*}}"_ZN1S4incrEv"
# CHECK: NULL
# CHECK: DW_TAG_subprogram
# CHECK: DW_AT_MIPS_linkage_name{{.*}}"_ZN1S4incrEi"
# CHECK: NULL
# CHECK: DW_TAG_subprogram
# CHECK: DW_AT_MIPS_linkage_name{{.*}}"_ZN1S3fooEv"
# CHECK: NULL
# CHECK: NULL

# This is "class N::C"

# CHECK: DW_TAG_namespace
# CHECK-NEXT: DW_AT_name{{.*}}"N"
# CHECK-NOT: NULL
# CHECK: 0x[[NC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# CHECK-NEXT: DW_AT_name{{.*}}"C"
# CHECK: NULL

# This is "class N::N::C"

# CHECK: DW_TAG_namespace
# CHECK-NEXT: DW_AT_name{{.*}}"N"
# CHECK-NOT: NULL
# CHECK: 0x[[NNC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# CHECK-NEXT: DW_AT_name{{.*}}"C"
# CHECK: NULL
# CHECK: NULL
# CHECK: NULL

# This is "AliasForS"
# CHECK: 0x[[ALIASFORS:[0-9a-f]*]]:{{.*}}DW_TAG_typedef
# CHECK-NEXT: DW_AT_type{{.*}}[[S]]
# CHECK-NEXT: DW_AT_name{{.*}}"AliasForS"

# This is "union U"

# CHECK:  0x[[U:[0-9a-f]*]]:{{.*}}DW_TAG_union_type
# CHECK-NEXT: DW_AT_name{{.*}}"U"
# CHECK-NOT: NULL
# CHECK:  0x[[UC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# CHECK-NOT: NULL
# CHECK:  0x[[US:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK: NULL

# This is "func" free function

# CHECK: DW_TAG_subprogram
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: DW_AT_name{{.*}}"func"
# CHECK: 0x[[CINSIDEFUNC:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK-NEXT: DW_AT_name{{.*}}"CInsideFunc"

# This is "(anonymous namespace)::AnonC"

# CHECK: DW_TAG_namespace
# CHECK-NOT: {{DW_AT_name|NULL|DW_TAG}}
# CHECK: 0x[[ANONC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# CHECK-NEXT: DW_AT_name{{.*}}"AnonC"

  - filename: odr1.o
    symbols:
      - { sym: __Z3foov, objAddr: 0x0, binAddr: 0x4000, size: 0x12 }
      - { sym: __Z4funcv, objAddr: 0x0, binAddr: 0x5000, size: 0x12 }
      - { sym: __ZZ4funcvENKUlvE_clEv,  objAddr: 0x0, binAddr: 0x6000, size: 0x12 }

# We relink the same file a second time. In the ODR case, everything (except for the
# union for now) should be uniqued. In the non-ODR case, we should get every type
# duplicated.

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr1.cpp"

# ODR: DW_TAG_union_type
# ODR-NEXT: DW_AT_name{{.*}}"U"
# Types defined inside the union should be uniqued:
# ODR: DW_TAG_member
# ODR-NEXT: DW_AT_name{{.*}}"C"
# ODR-NOT: {{NULL|DW_TAG}}
# ODR: DW_AT_type{{.*}}[[UC]]
# ODR: DW_TAG_member
# ODR-NEXT: DW_AT_name{{.*}}"S"
# ODR-NOT: {{NULL|DW_TAG}}
# ODR: DW_AT_type{{.*}}[[US]]

# Skip func
# ODR: DW_TAG_subprogram
# ODR-NOT: {{NULL|DW_TAG}}
# ODR: DW_AT_name{{.*}}"func"
# ODR: NULL

# ODR: DW_TAG_subprogram
# ODR-NOT: {{NULL|DW_TAG}}
# ODR: DW_AT_name{{.*}}"foo"
# ODR-NOT: NULL
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"s"
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[ALIASFORS]]
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"nc"
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[NC]]
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"nnc"
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[NNC]]
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"ac"
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[ANONC]]

# ODR: DW_TAG_subprogram
# ODR-NOT: {{NULL|DW_TAG}}
# ODR: linkage_name{{.*}}"_ZZ4funcvENKUlvE_clEv"
# ODR-NOT: NULL
# ODR: DW_TAG_variable
# ODR-NOT: DW_TAG
# ODR: DW_AT_name{{.*}}"dummy"
# ODR-NOT: NULL
# ODR: DW_AT_type{{.*}}[[CINSIDEFUNC]]

# With no ODR uniquing, we should get copies of all the types:

# This is "struct S"
# NOODR: 0x[[DUP_S:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# NOODR-NEXT: DW_AT_name{{.*}}"S"

# This is "class N::C"
# NOODR: DW_TAG_namespace
# NOODR-NEXT: DW_AT_name{{.*}}"N"
# NOODR: 0x[[DUP_NC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# NOODR-NEXT: DW_AT_name{{.*}}"C"

# This is "class N::N::C"
# NOODR: DW_TAG_namespace
# NOODR-NEXT: DW_AT_name{{.*}}"N"
# NOODR: 0x[[DUP_NNC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# NOODR-NEXT: DW_AT_name{{.*}}"C"

# This is "AliasForS"
# NOODR: 0x[[DUP_ALIASFORS:[0-9a-f]*]]:{{.*}}DW_TAG_typedef
# NOODR-NOT: {{NULL|DW_TAG}}
# NOODR: DW_AT_name{{.*}}"AliasForS"

# This is "union U"

# NOODR:  0x[[U:[0-9a-f]*]]:{{.*}}DW_TAG_union_type
# NOODR-NEXT: DW_AT_name{{.*}}"U"
# NOODR-NOT: NULL
# NOODR:  0x[[DUP_UC:[0-9a-f]*]]:{{.*}}DW_TAG_class_type
# NOODR-NOT: NULL
# NOODR:  0x[[DUP_US:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# NOODR: NULL

# This is "func" free function

# NOODR: DW_TAG_subprogram
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_name{{.*}}"func"
# NOODR: 0x[[DUP_CINSIDEFUNC:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# NOODR-NEXT: DW_AT_name{{.*}}"CInsideFunc"

# NOODR: DW_TAG_subprogram
# NOODR-NOT: {{NULL|DW_TAG}}
# NOODR: DW_AT_name{{.*}}"foo"
# NOODR-NOT: NULL
# NOODR: DW_TAG_variable
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_name{{.*}}"s"
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_type{{.*}}[[DUP_ALIASFORS]]
# NOODR: DW_TAG_variable
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_name{{.*}}"nc"
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_type{{.*}}[[DUP_NC]]
# NOODR: DW_TAG_variable
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_name{{.*}}"nnc"
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_type{{.*}}[[DUP_NNC]]
# NOODR: DW_TAG_variable
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_name{{.*}}"ac"
# NOODR-NOT: {{DW_TAG|NULL}}
# NOODR: DW_AT_type{{.*}}0x[[DUP_ANONC:[0-9a-f]*]]

# This is the lanbda inside func

# NOODR: DW_TAG_subprogram
# NOODR-NOT: {{NULL|DW_TAG}}
# NOODR: linkage_name{{.*}}"_ZZ4funcvENKUlvE_clEv"
# NOODR-NOT: NULL
# NOODR: DW_TAG_variable
# NOODR-NOT: DW_TAG
# NOODR: DW_AT_name{{.*}}"dummy"
# NOODR-NOT: NULL
# NOODR: DW_AT_type{{.*}}[[DUP_CINSIDEFUNC]]

# This is "(anonymous namespace)::AnonC"

# NOODR: DW_TAG_namespace
# NOODR-NOT: {{DW_AT_name|NULL|DW_TAG}}
# NOODR: 0x[[DUP_ANONC]]:{{.*}}DW_TAG_class_type
# NOODR-NEXT: DW_AT_name{{.*}}"AnonC"

  - filename: odr2.o
    symbols:
      - { sym: __ZN1S3fooEv, objAddr: 0x0, binAddr: 0x7000, size: 0x12 }
      - { sym: __Z3barv, objAddr: 0x0, binAddr: 0x8000, size: 0x12 }
  - filename: odr3.o
    symbols:
      - { sym: __ZN1S3fooEv, objAddr: 0x0, binAddr: 0x8000, size: 0x12 }
      - { sym: __Z3barv, objAddr: 0x0, binAddr: 0x9000, size: 0x12 }

# odr2.cpp and odr3.cpp test that a simple overloaded function doesn't break the
# uniquing (contrary to what we'll see with template/artificial) functions. 

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr2.cpp"

# NO-ODR: DW_TAG_structure_type
# ODR-NOT: DW_TAG_structure_type

# ODR: DW_TAG_subprogram
# ODR: DW_AT_specification{{.*}}4incr
# ODR: DW_TAG_formal_parameter
# ODR-NEXT: DW_AT_name{{.*}}"this"
# ODR-NEXT: DW_AT_type{{.*}}0x00000000[[S_PTR:[0-9a-f]*]]
# ODR: 0x[[S_PTR]]:{{.*}}DW_TAG_pointer_type
# ODR-NEXT: DW_AT_type{{.*}}[[S]]
# ODR: DW_TAG_subprogram
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"bar"
# ODR-NOT: NULL
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[S]]
# ODR-NOT NULL
# DOR: DW_TAG_inlined_subroutine
# ODR-NOT NULL
# ODR: DW_TAG_formal_parameter
# ODR-NOT {{NULL|DW_TAG}}
# ODR: DW_AT_type{{.*}}[[S_PTR]]

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr3.cpp"

# NO-ODR: DW_TAG_structure_type
# ODR-NOT: DW_TAG_structure_type

# ODR: DW_TAG_subprogram
# ODR: DW_AT_specification{{.*}}4incr
# ODR: DW_TAG_formal_parameter
# ODR-NEXT: DW_AT_name{{.*}}"this"
# ODR-NEXT: DW_AT_type{{.*}}0x00000000[[S_PTR2:[0-9a-f]*]]
# ODR: 0x[[S_PTR2]]:{{.*}}DW_TAG_pointer_type
# ODR-NEXT: DW_AT_type{{.*}}[[S]]
# ODR: DW_TAG_subprogram
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_name{{.*}}"bar"
# ODR-NOT: NULL
# ODR: DW_TAG_variable
# ODR-NOT: {{DW_TAG|NULL}}
# ODR: DW_AT_type{{.*}}[[S]]
# ODR-NOT NULL
# DOR: DW_TAG_inlined_subroutine
# ODR-NOT NULL
# ODR: DW_TAG_formal_parameter
# ODR-NOT {{NULL|DW_TAG}}
# ODR: DW_AT_type{{.*}}[[S_PTR2]]

  - filename: odr4.o
    symbols:
      - { sym: __Z3bazv, objAddr: 0x0, binAddr: 0xa000, size: 0x12 }

# odr4.cpp helps check that anonymous namespaces with similarly named contents do
# not get uniqued.

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr4.cpp"

# CHECK: DW_TAG_subprogram
# CHECK-NOT: NULL
# CHECK: DW_TAG_variable
# CHECK-NOT: DW_TAG
# ODR: DW_AT_type{{.*}}[[LOCALANONC:........]])
# NOODR: DW_AT_type{{.*}}[[LOCALANONC:........]]})

# CHECK: DW_TAG_namespace
# CHECK-NOT: DW_AT_name
# CHECK: [[LOCALANONC]]{{.*}}DW_TAG_class_type
# CHECK-NOT: {{NULL|DW_TAG}}
# CHECK: DW_AT_name{{.*}}"AnonC"

  - filename: odr5.o
    symbols:
      - { sym: __Z3bazv, objAddr: 0x0, binAddr: 0xb000, size: 0x12 }
      - { sym: __ZN1S6Nested4initIiEEvT_, objAddr: 0x0, binAddr: 0xc000, size: 0x12 }
  - filename: odr6.o
    symbols:
      - { sym: __Z3bazv, objAddr: 0x0, binAddr: 0xd000, size: 0x12 }
      - { sym: __ZN1S6Nested4initIdEEvT_, objAddr: 0x0, binAddr: 0xe000, size: 0x12 }

# odr5.cpp and odr6.cpp instanciate a template member function of the S class.
# They instanciate it with different types. As DWARF only describes the actual
# intances, these members aren't described in the uniqued class definition of
# odr1.cpp. Both these files should contain a new copy of S' definition with
# the template instance included.

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr5.cpp"

# CHECK: 0x{{[0-9a-f]*}}:{{.*}}DW_TAG_structure_type
# CHECK-NEXT: DW_AT_name{{.*}}"S"
# CHECK-NOT: NULL
# CHECK: 0x[[NESTED2:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: DW_AT_name{{.*}}"Nested"
# CHECK-NOT: NULL
# CHECK: 0x[[INITTEMPLATE:[0-9a-f]*]]:{{.*}}DW_TAG_subprogram
# CHECK-NEXT:{{.*}}"_ZN1S6Nested4init

# CHECK: DW_AT_specification{{.*}}[[INITTEMPLATE]]
# CHECK: DW_TAG_formal_parameter
# CHECK-NOT: DW_TAG
# CHECK: DW_AT_type{{.*}}[[NESTED_PTR:[0-9a-f]{8}]]{{[}]?}})

# CHECK: 0x[[NESTED_PTR]]{{.*}}DW_TAG_pointer_type
# ODR-NEXT: DW_AT_type{{.*}}[[NESTED]]
# NOODR-NEXT: DW_AT_type{{.*}}[[NESTED2]]

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr6.cpp"

# CHECK: 0x{{[0-9a-f]*}}:{{.*}}DW_TAG_structure_type
# CHECK-NEXT: DW_AT_name{{.*}}"S"
# CHECK-NOT: NULL
# CHECK: 0x[[NESTED3:[0-9a-f]*]]:{{.*}}DW_TAG_structure_type
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: DW_AT_name{{.*}}"Nested"
# CHECK-NOT: NULL
# CHECK: 0x[[INITTEMPLATE2:[0-9a-f]*]]:{{.*}}DW_TAG_subprogram
# CHECK-NEXT:{{.*}}"_ZN1S6Nested4init

# CHECK: DW_AT_specification{{.*}}[[INITTEMPLATE2]]
# CHECK: DW_TAG_formal_parameter
# CHECK-NOT: DW_TAG
# CHECK: DW_AT_type{{.*}}[[NESTED_PTR2:[0-9a-f]{8}]]{{[}]?}})

# CHECK: 0x[[NESTED_PTR2]]{{.*}}DW_TAG_pointer_type
# ODR-NEXT: DW_AT_type{{.*}}[[NESTED]]
# NOODR-NEXT: DW_AT_type{{.*}}[[NESTED3]]

  - filename: odr7.o
    symbols:
      - { sym: __Z3foov, objAddr: 0x0, binAddr: 0xf000, size: 0x12 }

# Check that a reference to a nested class correctly refers to the original
# definition

# CHECK: TAG_compile_unit
# CHECK-NOT: {{DW_TAG|NULL}}
# CHECK: AT_name{{.*}}"odr7.cpp"

# ODR: DW_TAG_subprogram
# ODR-NOT: NULL
# ODR: DW_TAG_variable
# ODR-NOT: DW_TAG
# ODR: DW_AT_type{{.*}}[[NESTED]]
...

