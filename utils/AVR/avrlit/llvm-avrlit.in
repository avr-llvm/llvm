#!/usr/bin/env python
#===-- llvm-avrlit - AVR LLVM Integrated Tester - Host Side ---------------===#
#
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
#
#===-----------------------------------------------------------------------===#

import sys, os, textwrap, subprocess, time, serial
from optparse import OptionParser, OptionGroup

# Variables configured at build time.
llvm_root = "@LLVM_SOURCE_DIR@"
avrlit_dir = os.path.join(llvm_root, "utils", "AVR", "avrlit", "libavrlit")

parser = OptionParser("usage: %prog [options] {ll-and-cpp-files}...")

def writeMakefile(name, cpp, ll):
  fields = {
    'avrlit_dir': avrlit_dir,
    'testname'  : name,
    'prog'      : os.path.basename(sys.argv[0]),
    'cflags'    : '-std=c++11',
  }
  with open(os.path.join(name, "Makefile"), "w") as makefile:
    makefile.write(textwrap.dedent('''
      # Generated by {prog}. Do not edit.
      AVRLIT_BOARD  ?= leonardo
      AVRLITD = {avrlit_dir}

      include $(AVRLITD)/$(AVRLIT_BOARD)/board.mk

      {testname}.$(AVRLIT_BOARD).hex:

      clean:
      \trm -f *.hex *.elf *.o

      .PHONY: clean

      {testname}.$(AVRLIT_BOARD).hex : {testname}.$(AVRLIT_BOARD).elf
      \tavr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature $< $@
      
    ''')[1:].format(**fields))
    objects = []
    sources = cpp + ll
    compile_cpp = ('avr-g++ -Os -mmcu=$(MCU) {cflags} -I$(AVRLITD) -c $< '
                   '-ffunction-sections -o $@').format(**fields)
    compile_ll  = 'llc -mtriple=avr-atmel-none $< -filetype=obj -o $@'
    for src in sources:
      (file, ext) = os.path.splitext(os.path.basename(src))
      obj = file + '.$(AVRLIT_BOARD).o'
      command = compile_ll if ext == '.ll' else compile_cpp
      makefile.write('{} : {}\n'
                     '\t{}\n\n'.format(obj, src, command))
      objects.append(obj)
    fields['objects'] = ' '.join(objects)
    fields['link'] = ('avr-g++ -Os -mmcu=$(MCU) {cflags} $^ -L$(AVRLITD)/$(AVRLIT_BOARD) '
                      '-lavrlit -Wl,--gc-sections -Wl,--relax '
                      '-o $@').format(**fields)
    makefile.write('{testname}.$(AVRLIT_BOARD).elf: {objects}\n'
                   '\t{link}\n'.format(**fields))


def buildTestExecutable(sources, board):
  (name, ext) = os.path.splitext(os.path.basename(sources[0]))
  ll_files  = []
  cpp_files = []
  for src in sources:
    if src.endswith('.ll'):
      ll_files.append(src)
    elif src.endswith('.cpp'):
      cpp_files.append(src)
    else:
      print("Unhandled file ", src)
      exit(1)

  if not os.path.exists(name):  
    os.mkdir(name)

  writeMakefile(name, cpp_files, ll_files)
  subprocess.check_call(['make', '-C', name])

  return os.path.join(name, '{}.{}.hex'.format(name, board))

#===============================================================================

def resetLeonardo(port):
  serial.Serial(port, 1200).close()
  while os.path.exists(port):
    time.sleep(0.1)
  while not os.path.exists(port):
    time.sleep(0.1)
  
def uploadLeonardo(executable, port):
  resetLeonardo(port)
  subprocess.check_call(['avrdude', '-patmega32u4', '-cavr109',
                                     '-P', port, '-b57600', '-q', '-q',
                                     '-D', '-Uflash:w:{}:i'.format(executable)],
                                     stderr=subprocess.STDOUT) # doesn't work :-/

def runExecutable(executable, port, board):
  uploadLeonardo(executable, port)
  while os.path.exists(port):
    time.sleep(0.1)
  retries = 0
  while True:
    try:
      test = serial.Serial(port, 57600, timeout=1)
      break
    except OSError as e:
      print(e)
      time.sleep(0.1)
      if ++retries == 50:
        raise

  done = False
  passed = True;
  while not done:
    line = test.readline().strip()
    print(line)
    if line.startswith(b'FAIL:'):
      passed = False;
    if line == '--':
      done = True
  test.close()
  return passed;

#===============================================================================

(opts, files) = parser.parse_args()
if not 'AVRLIT_PORT' in os.environ:
  print('AVRLIT_PORT environment variable is not set')
  exit(1)

port = os.environ['AVRLIT_PORT']
if not os.path.exists(port):
  print('AVRLIT_PORT \'{}\' does not exist'.format(port))
  exit(1)

board = os.environ['AVRLIT_BOARD'] if 'AVRLIT_BOARD' in os.environ else 'leonardo'
executable = buildTestExecutable(files, board)
exit(0 if runExecutable(executable, port, board) else 1)

# vim: filetype=python
